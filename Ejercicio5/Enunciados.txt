1. Pedir un número N, introducir N sueldos, y mostrar el sueldo máximo.

2. Diseña una aplicación que muestre las tablas de multiplicar del 1 al 10.

3. Dibuja un cuadrado de n elementos de lado utilizando *.

4. Realizar un programa que nos pida un número n, y nos diga cuantos números hay entre 1 y n que son primos.

5. Leer 5 números y mostrarlos en el mismo orden introducido.

6. Leer 5 números y mostrarlos en orden inverso al introducido.

7.  Leer 10 números enteros. Debemos mostrarlos en el siguiente orden: el primero, el último, el segundo, el penúltimo, el tercero, etc.

8. Leer los datos correspondiente a dos arrays de 12 elementos numéricos, y mezclarlos en una tercera de la forma: 3 de la array A, 3 de la B, otros 3 de A, otros 3 de la B, etc.

9. Leer por teclado una serie de 10 números enteros. La aplicación debe indicarnos si los números están ordenados de forma creciente, decreciente, o si están desordenados.

10. Diseñar una aplicación que declare un array de 10 elementos enteros. Leer mediante el teclado 8 números. Después se debe pedir un número y una posición, insertarlo en la posición indicada, desplazando los que estén detrás.

11. Crear un programa que lea por teclado un array de 10 números enteros y la desplace una posición hacia abajo: **el primero pasa a ser el segundo, el segundo pasa a ser el tercero y así sucesivamente. El último pasa a
ser el primero**.

**Ejemplo:** 
Si el usuario introduce:
```[1, 2, 3, 4, 5, 6, 7, 8, 9]```
se deberá mostrar:
```[9, 1, 2, 3, 4, 5, 6, 7, 8]```

12.  Crear un programa que lea por teclado un array de 10 números enteros y lo desplace N posiciones hacia abajo.

Ejemplo:
Si el usuario introduce este array:
[23, 45, 24, 1, 7, 87, -1, 0, 34, 12]
Y si introduce este numero para realizar el desplazamiento:
3
se deberá mostrar:
[0, 34, 12, 23, 45, 23, 1, 7, 87, -1]

13. Leer por teclado una serie de 10 números enteros. La aplicación debe indicarnos si los números están
ordenados de forma creciente, decreciente, o si no están en ninguno de los 2.

[1, 2, 3, 4, 4, 5, 6, 7, 8, 9] => ascendente
[4, 4, 4, 4, 4, 4, 4, 4, 4, 4] => ninguno
[2, 5, 6, 8, 3, 5, 7, 3, 2] => ninguno
[9, 8, 7, 7, 6, 5, 4, 3, 2] => descendente
